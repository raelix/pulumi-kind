// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package create

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KindCluster struct {
	pulumi.CustomResourceState

	// Client certificate for authenticating to cluster.
	ClientCertificate pulumi.StringOutput `pulumi:"clientCertificate"`
	// Client key for authenticating to cluster.
	ClientKey pulumi.StringOutput `pulumi:"clientKey"`
	// Client verifies the server certificate with this CA cert.
	ClusterCaCertificate pulumi.StringOutput `pulumi:"clusterCaCertificate"`
	// Cluster successfully created.
	Completed pulumi.BoolOutput `pulumi:"completed"`
	// Kubernetes APIServer endpoint.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The kind_config that kind will use to bootstrap the cluster.
	KindConfig KindClusterKindConfigPtrOutput `pulumi:"kindConfig"`
	// Kubeconfig set after the the cluster is created.
	Kubeconfig pulumi.StringOutput `pulumi:"kubeconfig"`
	// Kubeconfig path set after the the cluster is created or by the user to override defaults.
	KubeconfigPath pulumi.StringOutput `pulumi:"kubeconfigPath"`
	// The kind name that is given to the created cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// The node_image that kind will use (ex: kindest/node:v1.23.4).
	NodeImage pulumi.StringOutput `pulumi:"nodeImage"`
	// Defines wether or not the provider will wait for the control plane to be ready. Defaults to false
	WaitForReady pulumi.BoolPtrOutput `pulumi:"waitForReady"`
}

// NewKindCluster registers a new resource with the given unique name, arguments, and options.
func NewKindCluster(ctx *pulumi.Context,
	name string, args *KindClusterArgs, opts ...pulumi.ResourceOption) (*KindCluster, error) {
	if args == nil {
		args = &KindClusterArgs{}
	}

	var resource KindCluster
	err := ctx.RegisterResource("kind:create/kindCluster:KindCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKindCluster gets an existing KindCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKindCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KindClusterState, opts ...pulumi.ResourceOption) (*KindCluster, error) {
	var resource KindCluster
	err := ctx.ReadResource("kind:create/kindCluster:KindCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KindCluster resources.
type kindClusterState struct {
	// Client certificate for authenticating to cluster.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// Client key for authenticating to cluster.
	ClientKey *string `pulumi:"clientKey"`
	// Client verifies the server certificate with this CA cert.
	ClusterCaCertificate *string `pulumi:"clusterCaCertificate"`
	// Cluster successfully created.
	Completed *bool `pulumi:"completed"`
	// Kubernetes APIServer endpoint.
	Endpoint *string `pulumi:"endpoint"`
	// The kind_config that kind will use to bootstrap the cluster.
	KindConfig *KindClusterKindConfig `pulumi:"kindConfig"`
	// Kubeconfig set after the the cluster is created.
	Kubeconfig *string `pulumi:"kubeconfig"`
	// Kubeconfig path set after the the cluster is created or by the user to override defaults.
	KubeconfigPath *string `pulumi:"kubeconfigPath"`
	// The kind name that is given to the created cluster.
	Name *string `pulumi:"name"`
	// The node_image that kind will use (ex: kindest/node:v1.23.4).
	NodeImage *string `pulumi:"nodeImage"`
	// Defines wether or not the provider will wait for the control plane to be ready. Defaults to false
	WaitForReady *bool `pulumi:"waitForReady"`
}

type KindClusterState struct {
	// Client certificate for authenticating to cluster.
	ClientCertificate pulumi.StringPtrInput
	// Client key for authenticating to cluster.
	ClientKey pulumi.StringPtrInput
	// Client verifies the server certificate with this CA cert.
	ClusterCaCertificate pulumi.StringPtrInput
	// Cluster successfully created.
	Completed pulumi.BoolPtrInput
	// Kubernetes APIServer endpoint.
	Endpoint pulumi.StringPtrInput
	// The kind_config that kind will use to bootstrap the cluster.
	KindConfig KindClusterKindConfigPtrInput
	// Kubeconfig set after the the cluster is created.
	Kubeconfig pulumi.StringPtrInput
	// Kubeconfig path set after the the cluster is created or by the user to override defaults.
	KubeconfigPath pulumi.StringPtrInput
	// The kind name that is given to the created cluster.
	Name pulumi.StringPtrInput
	// The node_image that kind will use (ex: kindest/node:v1.23.4).
	NodeImage pulumi.StringPtrInput
	// Defines wether or not the provider will wait for the control plane to be ready. Defaults to false
	WaitForReady pulumi.BoolPtrInput
}

func (KindClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*kindClusterState)(nil)).Elem()
}

type kindClusterArgs struct {
	// The kind_config that kind will use to bootstrap the cluster.
	KindConfig *KindClusterKindConfig `pulumi:"kindConfig"`
	// Kubeconfig path set after the the cluster is created or by the user to override defaults.
	KubeconfigPath *string `pulumi:"kubeconfigPath"`
	// The kind name that is given to the created cluster.
	Name *string `pulumi:"name"`
	// The node_image that kind will use (ex: kindest/node:v1.23.4).
	NodeImage *string `pulumi:"nodeImage"`
	// Defines wether or not the provider will wait for the control plane to be ready. Defaults to false
	WaitForReady *bool `pulumi:"waitForReady"`
}

// The set of arguments for constructing a KindCluster resource.
type KindClusterArgs struct {
	// The kind_config that kind will use to bootstrap the cluster.
	KindConfig KindClusterKindConfigPtrInput
	// Kubeconfig path set after the the cluster is created or by the user to override defaults.
	KubeconfigPath pulumi.StringPtrInput
	// The kind name that is given to the created cluster.
	Name pulumi.StringPtrInput
	// The node_image that kind will use (ex: kindest/node:v1.23.4).
	NodeImage pulumi.StringPtrInput
	// Defines wether or not the provider will wait for the control plane to be ready. Defaults to false
	WaitForReady pulumi.BoolPtrInput
}

func (KindClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kindClusterArgs)(nil)).Elem()
}

type KindClusterInput interface {
	pulumi.Input

	ToKindClusterOutput() KindClusterOutput
	ToKindClusterOutputWithContext(ctx context.Context) KindClusterOutput
}

func (*KindCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**KindCluster)(nil)).Elem()
}

func (i *KindCluster) ToKindClusterOutput() KindClusterOutput {
	return i.ToKindClusterOutputWithContext(context.Background())
}

func (i *KindCluster) ToKindClusterOutputWithContext(ctx context.Context) KindClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KindClusterOutput)
}

// KindClusterArrayInput is an input type that accepts KindClusterArray and KindClusterArrayOutput values.
// You can construct a concrete instance of `KindClusterArrayInput` via:
//
//	KindClusterArray{ KindClusterArgs{...} }
type KindClusterArrayInput interface {
	pulumi.Input

	ToKindClusterArrayOutput() KindClusterArrayOutput
	ToKindClusterArrayOutputWithContext(context.Context) KindClusterArrayOutput
}

type KindClusterArray []KindClusterInput

func (KindClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KindCluster)(nil)).Elem()
}

func (i KindClusterArray) ToKindClusterArrayOutput() KindClusterArrayOutput {
	return i.ToKindClusterArrayOutputWithContext(context.Background())
}

func (i KindClusterArray) ToKindClusterArrayOutputWithContext(ctx context.Context) KindClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KindClusterArrayOutput)
}

// KindClusterMapInput is an input type that accepts KindClusterMap and KindClusterMapOutput values.
// You can construct a concrete instance of `KindClusterMapInput` via:
//
//	KindClusterMap{ "key": KindClusterArgs{...} }
type KindClusterMapInput interface {
	pulumi.Input

	ToKindClusterMapOutput() KindClusterMapOutput
	ToKindClusterMapOutputWithContext(context.Context) KindClusterMapOutput
}

type KindClusterMap map[string]KindClusterInput

func (KindClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KindCluster)(nil)).Elem()
}

func (i KindClusterMap) ToKindClusterMapOutput() KindClusterMapOutput {
	return i.ToKindClusterMapOutputWithContext(context.Background())
}

func (i KindClusterMap) ToKindClusterMapOutputWithContext(ctx context.Context) KindClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KindClusterMapOutput)
}

type KindClusterOutput struct{ *pulumi.OutputState }

func (KindClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KindCluster)(nil)).Elem()
}

func (o KindClusterOutput) ToKindClusterOutput() KindClusterOutput {
	return o
}

func (o KindClusterOutput) ToKindClusterOutputWithContext(ctx context.Context) KindClusterOutput {
	return o
}

// Client certificate for authenticating to cluster.
func (o KindClusterOutput) ClientCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *KindCluster) pulumi.StringOutput { return v.ClientCertificate }).(pulumi.StringOutput)
}

// Client key for authenticating to cluster.
func (o KindClusterOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v *KindCluster) pulumi.StringOutput { return v.ClientKey }).(pulumi.StringOutput)
}

// Client verifies the server certificate with this CA cert.
func (o KindClusterOutput) ClusterCaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *KindCluster) pulumi.StringOutput { return v.ClusterCaCertificate }).(pulumi.StringOutput)
}

// Cluster successfully created.
func (o KindClusterOutput) Completed() pulumi.BoolOutput {
	return o.ApplyT(func(v *KindCluster) pulumi.BoolOutput { return v.Completed }).(pulumi.BoolOutput)
}

// Kubernetes APIServer endpoint.
func (o KindClusterOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *KindCluster) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// The kind_config that kind will use to bootstrap the cluster.
func (o KindClusterOutput) KindConfig() KindClusterKindConfigPtrOutput {
	return o.ApplyT(func(v *KindCluster) KindClusterKindConfigPtrOutput { return v.KindConfig }).(KindClusterKindConfigPtrOutput)
}

// Kubeconfig set after the the cluster is created.
func (o KindClusterOutput) Kubeconfig() pulumi.StringOutput {
	return o.ApplyT(func(v *KindCluster) pulumi.StringOutput { return v.Kubeconfig }).(pulumi.StringOutput)
}

// Kubeconfig path set after the the cluster is created or by the user to override defaults.
func (o KindClusterOutput) KubeconfigPath() pulumi.StringOutput {
	return o.ApplyT(func(v *KindCluster) pulumi.StringOutput { return v.KubeconfigPath }).(pulumi.StringOutput)
}

// The kind name that is given to the created cluster.
func (o KindClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KindCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The node_image that kind will use (ex: kindest/node:v1.23.4).
func (o KindClusterOutput) NodeImage() pulumi.StringOutput {
	return o.ApplyT(func(v *KindCluster) pulumi.StringOutput { return v.NodeImage }).(pulumi.StringOutput)
}

// Defines wether or not the provider will wait for the control plane to be ready. Defaults to false
func (o KindClusterOutput) WaitForReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KindCluster) pulumi.BoolPtrOutput { return v.WaitForReady }).(pulumi.BoolPtrOutput)
}

type KindClusterArrayOutput struct{ *pulumi.OutputState }

func (KindClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KindCluster)(nil)).Elem()
}

func (o KindClusterArrayOutput) ToKindClusterArrayOutput() KindClusterArrayOutput {
	return o
}

func (o KindClusterArrayOutput) ToKindClusterArrayOutputWithContext(ctx context.Context) KindClusterArrayOutput {
	return o
}

func (o KindClusterArrayOutput) Index(i pulumi.IntInput) KindClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KindCluster {
		return vs[0].([]*KindCluster)[vs[1].(int)]
	}).(KindClusterOutput)
}

type KindClusterMapOutput struct{ *pulumi.OutputState }

func (KindClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KindCluster)(nil)).Elem()
}

func (o KindClusterMapOutput) ToKindClusterMapOutput() KindClusterMapOutput {
	return o
}

func (o KindClusterMapOutput) ToKindClusterMapOutputWithContext(ctx context.Context) KindClusterMapOutput {
	return o
}

func (o KindClusterMapOutput) MapIndex(k pulumi.StringInput) KindClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KindCluster {
		return vs[0].(map[string]*KindCluster)[vs[1].(string)]
	}).(KindClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KindClusterInput)(nil)).Elem(), &KindCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*KindClusterArrayInput)(nil)).Elem(), KindClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KindClusterMapInput)(nil)).Elem(), KindClusterMap{})
	pulumi.RegisterOutputType(KindClusterOutput{})
	pulumi.RegisterOutputType(KindClusterArrayOutput{})
	pulumi.RegisterOutputType(KindClusterMapOutput{})
}
